service: recipes-backend

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  environment:
    RECIPES_TABLE: Recipes-${self:provider.stage}
    IMAGES_BUCKET: recipes-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH0_CERTIFICATE_URL: https://dev-9ncdqdat.eu.auth0.com/.well-known/jwks.json

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

custom:
  dynamodb:
    stages:
      ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migration: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Recipes API
        description: Serverless API for sharing recipes
    models:
      - name: CreateRecipeRequest
        contentType: application/json
        schema: ${file(src/requestSchemas/create-recipe-request.json)}
      - name: UpdateRecipeRequest
        contentType: application/json
        schema: ${file(src/requestSchemas/update-recipe-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetRecipes:
    handler: src/lambda/http/getRecipes.handler
    events:
      - http:
          path: /recipes
          authorizer: Auth
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  GetRecipe:
    handler: src/lambda/http/getRecipe.handler
    events:
      - http:
          path: /recipes/{recipeId}
          authorizer: Auth
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  DeleteRecipe:
    handler: src/lambda/http/deleteRecipe.handler
    events:
      - http:
          path: /recipes/{recipeId}
          authorizer: Auth
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*

  CreateRecipe:
    handler: src/lambda/http/createRecipe.handler
    events:
      - http:
          path: /recipes
          authorizer: Auth
          method: post
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new recipe
            description: Create a new recipe
            requestModels:
              'application/json': CreateRecipeRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*

  UpdateRecipe:
    handler: src/lambda/http/updateRecipe.handler
    events:
      - http:
          path: /recipes/{recipeId}
          authorizer: Auth
          method: patch
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a recipe
            description: Update a recipe
            requestModels:
              'application/json': UpdateRecipeRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    RecipesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RECIPES_TABLE}
        AttributeDefinitions:
          - AttributeName: author
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: author
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: ImagesBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicreadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*'
        Bucket: !Ref ImagesBucket
